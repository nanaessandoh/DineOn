@page "/checkout/success"


@if (checkoutService.GetCurrentOrder(cartId) != null)
{
    <div class="jumbotron text-center mt-3">
        <h1 class="display-3">Order Complete!</h1>
        <p class="lead"><strong>Your order is being prepared.</strong> The delivery driver will contact you on arrival. Thanks for patronising DineOn!</p>
        <hr>
        <p>Want to try out another dish?</p>
        <button class="btn btn-lg btn-outline-dark mt-3" @onclick="NavigateToMenu">Explore Our Menu</button>
 
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col-md-9 clearfix">
            <p class="display-3">DineOn</p>
        </div>
        <div class="col-md-3 pt-md-5">
            <a class="h4" @onclick="NavigateToMenu" role="button"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;&nbsp;Return to Menu</a>
        </div>
    </div>
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">Sorry!</h4>
        <p>You dont have any complete orders</p>
    </div>
}

@code{
    public string cartId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(await ProtectedSessionStore.GetAsync<string>("cartId")))
        {
            await ProtectedSessionStore.SetAsync("cartId", Guid.NewGuid().ToString());
        }
        cartId = await ProtectedSessionStore.GetAsync<string>("cartId");
    }

    private void NavigateToMenu()
    {
        NavigationManager.NavigateTo("Menu/FullMenu", true);
    }
}
